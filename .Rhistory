library(shiny); runApp('app12.R')
runApp('app12.R')
library(readxl)
library(dplyr)
library(leaflet)
library(scales)
library(rnaturalearth)
# Load the data
life_insurers <- read_excel("./data/data.xlsx", sheet = 'Insurers')
# Aggregate GWP data by country
aggregated_data <- life_insurers %>%
group_by(Country, Latitude, Longitude) %>%
summarise(Total_GWP = sum(Gross_written_premium_in_USD, na.rm = TRUE), .groups = 'drop') %>%
# Convert Total_GWP to millions with 2 decimals and add "M" suffix
mutate(Total_GWP_Millions = paste0(comma(Total_GWP / 1000000, accuracy = 0.01), "M"))
# Create a color palette for the heatmap
pal <- colorNumeric(palette = "viridis", domain = aggregated_data$Total_GWP)
# Get African countries geometry
africa <- rnaturalearth::ne_countries(continent = "Africa", returnclass = "sf")
# Merge aggregated data with Africa geometry
map_data <- merge(africa, aggregated_data, by.x = "name", by.y = "Country", all.x = TRUE)
# Create leaflet map
leaflet(data = map_data) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude, lat = ~Latitude,
color = ~pal(Total_GWP),
radius = ~sqrt(Total_GWP) / 50000,
popup = ~paste("<b>Country:</b>", name, "<br/>",
"<b>Total GWP:</b>", Total_GWP_Millions) # Use formatted Total_GWP
) %>%
addPolygons(
fillColor = ~pal(Total_GWP),
fillOpacity = 0.7,
color = "white",
weight = 1,
label = ~paste(name, "- Total GWP:", Total_GWP_Millions), # Use formatted Total_GWP
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto",
opacity = 0.8
)
) %>%
setView(lng = 20, lat = 0, zoom = 3) %>%
addLegend(
"bottomright", pal = pal, values = aggregated_data$Total_GWP,
title = "Total GWP (USD)", opacity = 1
)
runApp('app12.R')
runApp('app12.R')
runApp('app12.R')
runApp('app13.R')
runApp('app12.R')
runApp('app13.R')
runApp('app12.R')
runApp('app13.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/Life Insurers In Africa/LifeInsuranceAfrica.R')
runApp('app14.R')
runApp('app14.R')
runApp('app14.R')
runApp('app14.R')
runApp('app14.R')
runApp('app14.R')
runApp('app15.R')
runApp('app14.R')
runApp('app15.R')
runApp('app14.R')
runApp('app15.R')
runApp('app15.R')
# Load the data
life_insurers <- read_excel("./data/data.xlsx", sheet = 'Insurers')
# Aggregate data by country and Category_Class
aggregated_data <- life_insurers %>%
filter(Category_Class %in% c("Below $40M", "Above $40M")) %>%
group_by(Country, Latitude, Longitude, Category_Class) %>%
summarise(Count_Insurers = n_distinct(Insurer), .groups = 'drop') %>%
pivot_wider(names_from = Category_Class, values_from = Count_Insurers, values_fill = list(Count_Insurers = 0))
# Convert NA to 0 and adjust column names
aggregated_data <- aggregated_data %>%
mutate(Below_40M = coalesce(`Below $40M`, 0),
Above_40M = coalesce(`Above $40M`, 0))
View(aggregated_data)
# Get African countries geometry
africa <- rnaturalearth::ne_countries(continent = "Africa", returnclass = "sf")
# Merge aggregated data with Africa geometry
map_data <- merge(africa, aggregated_data, by.x = "name", by.y = "Country", all.x = TRUE)
View(map_data)
runApp('app15.R')
runApp('app15.R')
runApp('app14.R')
runApp('app14.R')
runApp('app14.R')
ifrs17 <- read_excel("./data/data.xlsx",sheet = 'IFRS17')
View(ifrs17)
runApp('app14.R')
runApp('app14.R')
runApp('app14.R')
runApp('app14.R')
runApp('app14.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/Life Insurers In Africa Dashboard/LifeInsuranceAfrica.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/Life Insurers In Africa Dashboard/LifeInsuranceAfrica.R')
